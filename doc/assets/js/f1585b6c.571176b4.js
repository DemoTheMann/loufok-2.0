"use strict";(self.webpackChunkloufok=self.webpackChunkloufok||[]).push([[518],{7224:(e,a,n)=>{n.r(a),n.d(a,{assets:()=>s,contentTitle:()=>d,default:()=>l,frontMatter:()=>i,metadata:()=>o,toc:()=>c});var r=n(5893),t=n(1151);const i={sidebar_position:5},d="isCadavreOn()",o={id:"model-cadavre/isCadavreOn",title:"isCadavreOn()",description:"La m\xe9thode isCadavreOn() de la classe CadavreModel prend en param\xe8tre l'identifiant d'un cadavre et v\xe9rifie si il est toujours actif.",source:"@site/docs/model-cadavre/isCadavreOn.md",sourceDirName:"model-cadavre",slug:"/model-cadavre/isCadavreOn",permalink:"/loufok/doc/docs/model-cadavre/isCadavreOn",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/model-cadavre/isCadavreOn.md",tags:[],version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5},sidebar:"tutorialSidebar",previous:{title:"cadavreEnCours()",permalink:"/loufok/doc/docs/model-cadavre/cadavreEnCours"},next:{title:"dateProchainCadavre()",permalink:"/loufok/doc/docs/model-cadavre/dateProchainCadavre"}},s={},c=[{value:"Code",id:"code",level:2}];function u(e){const a={code:"code",h1:"h1",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,t.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(a.h1,{id:"iscadavreon",children:"isCadavreOn()"}),"\n",(0,r.jsx)(a.p,{children:"La m\xe9thode isCadavreOn() de la classe CadavreModel prend en param\xe8tre l'identifiant d'un cadavre et v\xe9rifie si il est toujours actif.\r\nIl renvoie les informations du cadavre si positif ou null si n\xe9gatif."}),"\n",(0,r.jsx)(a.p,{children:"Cette m\xe9thode fait appel aux entit\xe9es :"}),"\n",(0,r.jsxs)(a.ul,{children:["\n",(0,r.jsx)(a.li,{children:(0,r.jsx)(a.code,{children:"Cadavre"})}),"\n",(0,r.jsx)(a.li,{children:(0,r.jsx)(a.code,{children:"Contribution"})}),"\n"]}),"\n",(0,r.jsx)(a.h2,{id:"code",children:"Code"}),"\n",(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-php",metastring:'title="CadavreModel"',children:"public static function isCadavreOn(int $id_cadavre)\r\n    {\r\n        $ajd = date('Y-m-d');\r\n        $cadavre = Cadavre::getInstance()->findBy(['id_cadavre'=>$id_cadavre])[0];\r\n\r\n            //si un cadavre exquis est en cours aujourd'hui\r\n            if($cadavre['date_debut_cadavre']<= $ajd && $cadavre['date_fin_cadavre']>=$ajd){\r\n            \r\n                //r\xe9cup\xe9rer les contributions du cadavre en cours pour v\xe9rif si le max n'a pas \xe9t\xe9 atteint\r\n                $contributions = Contribution::getInstance()->findBy(['id_'.$_SESSION['role'] => $_SESSION['user_id'], 'id_cadavre'=> $cadavre['id_cadavre']]);\r\n                $max_contribution = 0;\r\n                foreach ($contributions as $contribution) {\r\n                    $max_contribution = $max_contribution + 1; \r\n                }\r\n\r\n                //si le max de contributions a \xe9t\xe9 atteint : renvoie null\r\n                if ($max_contribution >=$cadavre['nb_contributions']) {\r\n                    return null;\r\n                }else{\r\n                    //si le max de contributions n'a pas \xe9t\xe9 atteint : affichage du cadavre en cours\r\n                    return $cadavre;\r\n                }\r\n        }\r\n\r\n        return null;\r\n    }\n"})})]})}function l(e={}){const{wrapper:a}={...(0,t.a)(),...e.components};return a?(0,r.jsx)(a,{...e,children:(0,r.jsx)(u,{...e})}):u(e)}},1151:(e,a,n)=>{n.d(a,{Z:()=>o,a:()=>d});var r=n(7294);const t={},i=r.createContext(t);function d(e){const a=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(a):{...a,...e}}),[a,e])}function o(e){let a;return a=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:d(e.components),r.createElement(i.Provider,{value:a},e.children)}}}]);