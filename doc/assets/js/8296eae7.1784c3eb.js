"use strict";(self.webpackChunkloufok=self.webpackChunkloufok||[]).push([[8252],{9546:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>l,contentTitle:()=>t,default:()=>u,frontMatter:()=>d,metadata:()=>s,toc:()=>o});var a=r(5893),i=r(1151);const d={sidebar_position:1},t="Model Cadavre",s={id:"models/model-cadavre",title:"Model Cadavre",description:'Le Model Cadavre g\xe8re les m\xe9thodes li\xe9es aux cadavres exquis, notamment en fonction de l"utilisateur.',source:"@site/docs/models/model-cadavre.md",sourceDirName:"models",slug:"/models/model-cadavre",permalink:"/loufok/doc/docs/models/model-cadavre",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Model",permalink:"/loufok/doc/docs/category/model"},next:{title:"Model Login",permalink:"/loufok/doc/docs/models/model-login"}},l={},o=[{value:"getInstance()",id:"getinstance",level:2},{value:"periodes()",id:"periodes",level:2},{value:"titres()",id:"titres",level:2},{value:"cadavreEnCours()",id:"cadavreencours",level:2},{value:"isCadavreOn()",id:"iscadavreon",level:2},{value:"dateProchainCadavre()",id:"dateprochaincadavre",level:2},{value:"titreUnique()",id:"titreunique",level:2},{value:"verificationPeriode()",id:"verificationperiode",level:2},{value:"nouveauCadavre()",id:"nouveaucadavre",level:2},{value:"nouvelleContribution()",id:"nouvellecontribution",level:2},{value:"validationForm()",id:"validationform",level:2}];function c(e){const n={code:"code",em:"em",h1:"h1",h2:"h2",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.a)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.h1,{id:"model-cadavre",children:"Model Cadavre"}),"\n",(0,a.jsx)(n.p,{children:'Le Model Cadavre g\xe8re les m\xe9thodes li\xe9es aux cadavres exquis, notamment en fonction de l"utilisateur.'}),"\n",(0,a.jsx)(n.h2,{id:"getinstance",children:"getInstance()"}),"\n",(0,a.jsx)(n.p,{children:"La m\xe9thode getInstance() ne prend pas de param\xe8tres et renvoie l'instance de la classe statique CadavreModel."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",metastring:'title="AdminController.php"',children:"$cadavreModel = CadavreModel::getInstance();\n"})}),"\n",(0,a.jsx)(n.h2,{id:"periodes",children:"periodes()"}),"\n",(0,a.jsxs)(n.p,{children:["La m\xe9thode periodes() ne prend pas de param\xe8tres et renvoie un ",(0,a.jsx)(n.strong,{children:"array"})," des p\xe9riodes d\xe9j\xe0 occup\xe9es par des cadavres exquis existants."]}),"\n",(0,a.jsx)(n.p,{children:"Cette m\xe9thode fait appel \xe0 l'entit\xe9 :"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.code,{children:"Cadavre"})}),"\n"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",metastring:'title="AdminController.php"',children:"$periodes = CadavreModel::getInstance()->periodes();\n"})}),"\n",(0,a.jsx)(n.h2,{id:"titres",children:"titres()"}),"\n",(0,a.jsxs)(n.p,{children:["La m\xe9thode titres() ne prend pas de param\xe8tres et renvoie un ",(0,a.jsx)(n.strong,{children:"array"})," des titres des cadavres exquis existants."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",metastring:'title="AdminController.php"',children:"$titres = CadavreModel::getInstance()->titres();\n"})}),"\n",(0,a.jsx)(n.h2,{id:"cadavreencours",children:"cadavreEnCours()"}),"\n",(0,a.jsxs)(n.p,{children:["La m\xe9thode cadavreEnCours() ne prend pas de param\xe8tres et v\xe9rifie si un cadavre exquis est actuellement en cours. Renvoie un ",(0,a.jsx)(n.strong,{children:"array"})," du cadavre exquis en cours ou ",(0,a.jsx)(n.strong,{children:"null"})," s'il n'y en a pas."]}),"\n",(0,a.jsx)(n.p,{children:"Cette m\xe9thode fait appel aux entit\xe9s :"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.code,{children:"Cadavre"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.code,{children:"Contribution"})}),"\n"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",metastring:'title="AdminController.php"',children:"$cadavreModel = CadavreModel::getInstance();\r\n$cadavreValide = $cadavreModel->cadavreEnCours();\n"})}),"\n",(0,a.jsx)(n.h2,{id:"iscadavreon",children:"isCadavreOn()"}),"\n",(0,a.jsx)(n.p,{children:"La m\xe9thode isCadavreOn() prend en param\xe8tre l'identifiant d'un cadavre exquis et v\xe9rifie s'il est toujours actif."}),"\n",(0,a.jsxs)(n.p,{children:["Si le cadavre exquis est en cours, renvoie un ",(0,a.jsx)(n.strong,{children:"array"})," du cadavre exquis.\r\nSi le cadavre exquis n'est pas en cours, renvoie ",(0,a.jsx)(n.strong,{children:"null"}),"."]}),"\n",(0,a.jsx)(n.p,{children:"Cette m\xe9thode fait appel aux entit\xe9s :"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.code,{children:"Cadavre"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.code,{children:"Contribution"})}),"\n"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",metastring:'title="AdminController.php"',children:"$cadavreModel = CadavreModel::getInstance();\r\n$cadavreToujoursEnCours = $cadavreModel->isCadavreOn(int $id_cadavre);\n"})}),"\n",(0,a.jsx)(n.h2,{id:"dateprochaincadavre",children:"dateProchainCadavre()"}),"\n",(0,a.jsxs)(n.p,{children:["La m\xe9thode dateProchainCadavre() ne prend pas de param\xe8tres et renvoie un ",(0,a.jsx)(n.strong,{children:"string"})," la date de d\xe9but du prochain cadavre exquis. Cette m\xe9thode est \xe0 utiliser si aucun cadavre exquis n'est actuellement en cours."]}),"\n",(0,a.jsx)(n.p,{children:"Cette m\xe9thode fait appel aux entit\xe9s :"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.code,{children:"Cadavre"})}),"\n"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",metastring:'title="AdminController.php"',children:"$cadavreModel = CadavreModel::getInstance();\r\n$cadavreValide = $cadavreModel->dateProchainCadavre();\n"})}),"\n",(0,a.jsx)(n.h2,{id:"titreunique",children:"titreUnique()"}),"\n",(0,a.jsxs)(n.p,{children:["La m\xe9thode titreUnique() prend le titre d'un cadavre exquis \xe0 enregistrer en param\xe8tre ( ",(0,a.jsx)(n.em,{children:"string"})," ) et v\xe9rifie si ce titre n'existe pas d\xe9j\xe0 dans la base de donn\xe9es.\r\nSi pr\xe9sence de doublon, la m\xe9thode renvoie un message d'erreur :"]}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.code,{children:'Un cadavre exquis a d\xe9j\xe0 le titre "_titreCadavreExquis_", veuillez changer.'})}),"\n",(0,a.jsxs)(n.p,{children:["Si aucun doublon, la m\xe9thode renvoie ",(0,a.jsx)(n.strong,{children:"null"}),"."]}),"\n",(0,a.jsx)(n.p,{children:"Cette m\xe9thode fait appel \xe0 l'entit\xe9 :"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.code,{children:"Cadavre"})}),"\n"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",metastring:'title="AdminController.php"',children:"//si la m\xe9thode renvoie null, aucun probl\xe8me\r\n//si la m\xe9thode renvoie un message, alors il y a un doublon\r\n$verif_titre = cadavreModel::getInstance()->titreUnique($titreCadavreExquis);\n"})}),"\n",(0,a.jsx)(n.h2,{id:"verificationperiode",children:"verificationPeriode()"}),"\n",(0,a.jsxs)(n.p,{children:["La m\xe9thode verificationPeriode() prend en param\xe8tres la date de d\xe9but ( ",(0,a.jsx)(n.em,{children:"string"})," ) et de fin ( ",(0,a.jsx)(n.em,{children:"string"})," ) d'un cadavre exquis \xe0 enregistrer et v\xe9rifie si sa p\xe9riode ne chevauche pas la p\xe9riode d'un cadavre exquis d\xe9j\xe0 existant."]}),"\n",(0,a.jsxs)(n.p,{children:["Si aucun chevauchement, la m\xe9thode renvoie ",(0,a.jsx)(n.strong,{children:"null"}),".\r\nSi pr\xe9sence de chevauchement, la m\xe9thode renvoie un message d'erreur :"]}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.code,{children:"Un cadavre exquis existe d\xe9j\xe0 pour la p\xe9riode du XX/XX/XX au XX/XX/XX. Le chevauchement de cadavre exquis n'est pas possible."})}),"\n",(0,a.jsx)(n.p,{children:"Cette m\xe9thode fait appel \xe0 l'entit\xe9 :"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.code,{children:"Cadavre"})}),"\n"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",metastring:'title="AdminController.php"',children:"//si la m\xe9thode renvoie null, aucun probl\xe8me\r\n// si elle renvoie un message, alors les p\xe9riodes se chevauchent\r\n$verif_periode = $cadavre->verificationPeriode($date_debut, $date_fin);\n"})}),"\n",(0,a.jsx)(n.h2,{id:"nouveaucadavre",children:"nouveauCadavre()"}),"\n",(0,a.jsxs)(n.p,{children:["La m\xe9thode nouveauCadavre() enregistre un nouveau cadavre exquis dans la base de donn\xe9es (table ",(0,a.jsx)(n.strong,{children:"cadavre"}),"). Elle prend en param\xe8tres l'identifiant de l'administrateur ( ",(0,a.jsx)(n.em,{children:"int"})," ) et un ",(0,a.jsx)(n.strong,{children:"array"})," de donn\xe9es dans un tableau assiocatif :"]}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"titre"}),"\n",(0,a.jsx)(n.li,{children:"nb_contributions_max"}),"\n",(0,a.jsx)(n.li,{children:"debut_cadavre"}),"\n",(0,a.jsx)(n.li,{children:"fin_cadavre"}),"\n",(0,a.jsx)(n.li,{children:"fin_cadavre"}),"\n"]}),"\n",(0,a.jsxs)(n.p,{children:["Renvoie le cadavre exquis nouvellement cr\xe9\xe9 dans un ",(0,a.jsx)(n.strong,{children:"array"})," dans un ",(0,a.jsx)(n.strong,{children:"array"}),"."]}),"\n",(0,a.jsx)(n.p,{children:"Cette m\xe9thode fait appel \xe0 l'entit\xe9 :"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.code,{children:"Cadavre"})}),"\n"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",metastring:'title="AdminController.php"',children:"$cadavreModel = CadavreModel::getInstance();\r\nif($_SERVER['REQUEST_METHOD'] === 'POST')\r\n{\r\n    //formulaire des donn\xe9es \xe0 rentrer\r\n    $formData = [\r\n        'titre' => $_POST['titre_cadavre'],\r\n        'debut_cadavre' => $_POST['debut_cadavre'],\r\n        'fin_cadavre' => $_POST['fin_cadavre'],\r\n        'nb_contributions_max' => $_POST['nb_contributions'],\r\n        'contribution' => $_POST['contribution'],\r\n    ];\r\n    $userId = $_SESSION['user_id'];\r\n    //renvoie le cadavre exquis dans un array\r\n    $creationCadavre = $cadavreModel->nouveauCadavre($userId, $formData);\r\n\r\n    //pour pouvoir exploiter le nouveau cadavre exquis cr\xe9\xe9\r\n    $creationCadavre = $creationCadavre[0];\r\n}\n"})}),"\n",(0,a.jsx)(n.h2,{id:"nouvellecontribution",children:"nouvelleContribution()"}),"\n",(0,a.jsxs)(n.p,{children:["La m\xe9thode nouvelleContribution() prend en param\xe8tres l'identifiant de l'administrateur ( ",(0,a.jsx)(n.em,{children:"int"})," ) qui vient de cr\xe9er le cadavre exquis, le nouveau cadavre exquis ( ",(0,a.jsx)(n.em,{children:"array"})," ) et le contenu de la contribution ( ",(0,a.jsx)(n.em,{children:"string"})," ). Elle enregistre la contribution d'ordre 1 par l'administrateur dans la base de donn\xe9es (table ",(0,a.jsx)(n.strong,{children:"contribution"}),"), elle intervient juste apr\xe8s la m\xe9thode ",(0,a.jsx)(n.strong,{children:"nouveauCadavre()"}),"."]}),"\n",(0,a.jsx)(n.p,{children:"Ne renvoie rien."}),"\n",(0,a.jsx)(n.p,{children:"Cette m\xe9thode fait appel \xe0 l'entit\xe9 :"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.code,{children:"Contribution"})}),"\n"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",metastring:'title="AdminController.php"',children:"$cadavreModel = CadavreModel::getInstance();\r\n//formulaire des donn\xe9es \xe0 rentrer\r\n$formData = [\r\n    'titre' => $_POST['titre_cadavre'],\r\n    'debut_cadavre' => $_POST['debut_cadavre'],\r\n    'fin_cadavre' => $_POST['fin_cadavre'],\r\n    'nb_contributions_max' => $_POST['nb_contributions'],\r\n    'contribution' => $_POST['contribution'],\r\n];\r\n$userId = $_SESSION['user_id'];\r\n$creationCadavre = $cadavreModel->nouveauCadavre($userId, $formData);\r\n$creationCadavre = $creationCadavre[0];\r\n$contribution = $formData[\"contribution\"];\r\n\r\n$cadavreModel->nouvelleContribution($userId, $creationCadavre, $contribution);\n"})}),"\n",(0,a.jsx)(n.h2,{id:"validationform",children:"validationForm()"}),"\n",(0,a.jsx)(n.p,{children:"La m\xe9thode validationForm() prend en param\xe8tres les informations du formulaire d'ajout d'un nouveau cadavre exquis et v\xe9rifie qu'elles sont toutes conformes."}),"\n",(0,a.jsxs)(n.p,{children:["Si aucune erreur n'est d\xe9tect\xe9e, la m\xe9thode renvoie ",(0,a.jsx)(n.strong,{children:"null"}),".\r\nSi une ou plusieurs erreurs sont d\xe9tect\xe9es, la m\xe9thode renvoie un tableau associatif ( ",(0,a.jsx)(n.em,{children:"array"})," ) contenant les messages d'erreur (minimum 1, maximum 5)."]}),"\n",(0,a.jsx)(n.p,{children:"Cette m\xe9thode utilise le composant Validator de Symfony :"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"composer require validator/symfony\n"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",metastring:'title="AdminController.php"',children:"$formData = [\r\n    'titre' => $_POST['titre_cadavre'],\r\n    'debut_cadavre' => $_POST['debut_cadavre'],\r\n    'fin_cadavre' => $_POST['fin_cadavre'],\r\n    'nb_contributions_max' => $_POST['nb_contributions'],\r\n    'contribution' => $_POST['contribution'],\r\n];\r\n//si la m\xe9thode renvoie null, aucun probl\xe8me\r\n// si elle renvoie un tableau associatif, alors il y a des erreurs\r\n$formulaire_errors = $cadavre->validationform($formData);    \n"})})]})}function u(e={}){const{wrapper:n}={...(0,i.a)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(c,{...e})}):c(e)}},1151:(e,n,r)=>{r.d(n,{Z:()=>s,a:()=>t});var a=r(7294);const i={},d=a.createContext(i);function t(e){const n=a.useContext(d);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:t(e.components),a.createElement(d.Provider,{value:n},e.children)}}}]);