"use strict";(self.webpackChunkloufok=self.webpackChunkloufok||[]).push([[6746],{9626:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>d,contentTitle:()=>a,default:()=>c,frontMatter:()=>i,metadata:()=>l,toc:()=>o});var t=r(5893),s=r(1151);const i={sidebar_position:2},a="Entit\xe9es Loufok",l={id:"loufok-entity",title:"Entit\xe9es Loufok",description:"Les entit\xe9es sont responsable de la liaison entre la base de donn\xe9e MySQL et l'application.",source:"@site/docs/loufok-entity.md",sourceDirName:".",slug:"/loufok-entity",permalink:"/loufok/doc/docs/loufok-entity",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/loufok-entity.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Introduction \xe0 l'application",permalink:"/loufok/doc/docs/introduction"},next:{title:"Mod\xe8le Admin",permalink:"/loufok/doc/docs/category/mod\xe8le-admin"}},d={},o=[{value:"tableName",id:"tablename",level:2},{value:"M\xe9thodes",id:"m\xe9thodes",level:2},{value:"__construct()",id:"__construct",level:3},{value:"getInstance()",id:"getinstance",level:3},{value:"find()",id:"find",level:3},{value:"findAll()",id:"findall",level:3},{value:"findBy()",id:"findby",level:3},{value:"exists()",id:"exists",level:3},{value:"create()",id:"create",level:3},{value:"update()",id:"update",level:3},{value:"delete()",id:"delete",level:3},{value:"query()",id:"query",level:3},{value:"getUserLatest()",id:"getuserlatest",level:3}];function u(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,s.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h1,{id:"entit\xe9es-loufok",children:"Entit\xe9es Loufok"}),"\n",(0,t.jsx)(n.p,{children:"Les entit\xe9es sont responsable de la liaison entre la base de donn\xe9e MySQL et l'application."}),"\n",(0,t.jsx)(n.h2,{id:"tablename",children:"tableName"}),"\n",(0,t.jsx)(n.p,{children:"Chaque entit\xe9e comporte une variable qui contient le nom de la table avec la quelle elle comunique dans la base de donn\xe9e MySQL.\r\nSi le nom de la table venait \xe0 changer, il suffit de changer le valeure de cette variable pour que l'application continue de fonctioner."}),"\n",(0,t.jsx)(n.h2,{id:"m\xe9thodes",children:"M\xe9thodes"}),"\n",(0,t.jsx)(n.p,{children:"M\xe9thodes des entit\xe9es Loufok."}),"\n",(0,t.jsx)(n.h3,{id:"__construct",children:"__construct()"}),"\n",(0,t.jsxs)(n.p,{children:["La m\xe9thode __construc() est appel\xe9 \xe0 l'instantiation de la classe, il va r\xe9cup\xe9rer les informations de connexion \xe0 la base de donn\xe9e et tenter d'\xe9tablir la liaison avec la table au nom sp\xe9cifi\xe9 dans ",(0,t.jsx)(n.code,{children:"tableName"}),"."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-php",metastring:'title="Entity"',children:"public function __construct()\r\n    {\r\n        if (!self::$dbh) {\r\n            try {\r\n                $dsn = 'mysql:host=' . APP_DB_HOST . ';dbname=' . APP_DB_NAME . ';charset=UTF8';\r\n                self::$dbh = new \\PDO(\r\n                    $dsn,\r\n                    // nom de l'utilisateur MYSQL\r\n                    APP_DB_USER,\r\n                    // mot de passe de dl'utilisateur MYSQL\r\n                    APP_DB_PASSWORD,\r\n                    // r\xe9glage d'options qui permet de r\xe9cup\xe9rer les informations de la base\r\n                    // sous forme de tableau associatif\r\n                    // et de demander de d\xe9clencher une exception quand une erreur de SQL est d\xe9tect\xe9e\r\n                    [\r\n                        \\PDO::ATTR_DEFAULT_FETCH_MODE => \\PDO::FETCH_ASSOC,\r\n                        \\PDO::ATTR_ERRMODE => \\PDO::ERRMODE_EXCEPTION,\r\n                    ]\r\n                );\r\n            } catch (\\Exception $e) {\r\n                // ICI on vient \xe9crire le message qui doit s'afficher quand\r\n                // une erreur de connexion \xe0 la base est produite\r\n                // ou quand une erreur de syntaxe SQL est rencontr\xe9e\r\n\r\n                // affichage d'un message r\xe9sum\xe9 en couleur\r\n                echo '<div style=\"font-size: 22px;color: red;padding: 2rem\">';\r\n                echo \"<h1>ERREUR</h1><p>{$e->getMessage()}</p>\";\r\n                // si on ne veut pas donner trop de d\xe9tail \xe0 l'internaute, alors on peut \xe9crire\r\n                // echo \"<h1>ERREUR</h1></p>\";\r\n                echo '</div>';\r\n                // arr\xeat du script\r\n                die();\r\n            }\r\n        }\r\n    }\n"})}),"\n",(0,t.jsx)(n.h3,{id:"getinstance",children:"getInstance()"}),"\n",(0,t.jsx)(n.p,{children:"La m\xe9thode getInstance() ne prend pas de param\xe8tres et renvoie l'instance de la classe statique de l'entit\xe9e en question."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-php",metastring:'title="Entity"',children:"protected static $instance;\r\n\r\n    public static function getInstance()\r\n    {\r\n        if (!isset(self::$instance)) {\r\n            self::$instance = new self();\r\n        }\r\n\r\n        return self::$instance;\r\n    }\n"})}),"\n",(0,t.jsx)(n.h3,{id:"find",children:"find()"}),"\n",(0,t.jsxs)(n.p,{children:["La m\xe9thode find() prend en param\xe8tre un identifiant et renvoit le tuple qui comporte cet identifiant dans sa table, si elle ne trouve rien, elle renvoit ",(0,t.jsx)(n.code,{children:"null"}),"."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-php",metastring:'title="Entity"',children:"    /**\r\n     * @param  integer  $id identifiant\r\n     * @return array\r\n     */\r\n    public function find(int $id): ?array\r\n    {\r\n        $sql = \"SELECT * FROM `{$this->tableName}` WHERE id = :id\";\r\n        $sth = $this->query($sql, [':id' => $id]);\r\n        if ($sth && $sth->rowCount()) {\r\n            return $sth->fetch();\r\n        }\r\n\r\n        return null;\r\n    }\n"})}),"\n",(0,t.jsx)(n.h3,{id:"findall",children:"findAll()"}),"\n",(0,t.jsx)(n.p,{children:"La m\xe9thode findAll() ne prend pas de param\xe8tres et renvoit l'enti\xe8ret\xe9 des tuples contenu dans sa table."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-php",metastring:'title="Entity"',children:'    /**\r\n     * Retourne toutes les informations.\r\n     *\r\n     * @return array\r\n     */\r\n    public function findAll(): ?array\r\n    {\r\n        $sql = "SELECT * FROM `{$this->tableName}`";\r\n        $sth = $this->query($sql);\r\n        if ($sth) {\r\n            return $sth->fetchAll();\r\n        }\r\n\r\n        return [];\r\n    }\n'})}),"\n",(0,t.jsx)(n.h3,{id:"findby",children:"findBy()"}),"\n",(0,t.jsx)(n.p,{children:"La m\xe9thode FindBy() prend en param\xe8tre un tableau associatif o\xf9 la cl\xe9 est un nom de champs et la valeur li\xe9 \xe0 cette cl\xe9 la valeur attendu pour ce champs."}),"\n",(0,t.jsx)(n.p,{children:"La m\xe9thode renvoit un tableau des tuples o\xf9 ces crit\xe8res ont \xe9t\xe9 v\xe9rifi\xe9s."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-php",metastring:'title="Entity"',children:'    /**\r\n     * Retourne les informations associ\xe9es \xe0 un/des crit\xe8res.\r\n     *\r\n     * @param  array  $criterias le tableau des crit\xe8res\r\n     * @return array\r\n     */\r\n    public function findBy(array $criterias): ?array\r\n    {\r\n        // d\xe9composer le tableau des crit\xe8res\r\n        foreach ($criterias as $f => $v) {\r\n            $fields[] = "$f = ?";\r\n            $values[] = $v;\r\n        }\r\n        // On transforme le tableau en cha\xeene de caract\xe8res s\xe9par\xe9e par des AND\r\n        $fields_list = implode(\' AND \', $fields);\r\n        $sql = "SELECT * FROM `{$this->tableName}` WHERE $fields_list ORDER BY ordre_soumission ASC";\r\n\r\n        return $this->query($sql, $values)->fetchAll();\r\n    }\n'})}),"\n",(0,t.jsx)(n.h3,{id:"exists",children:"exists()"}),"\n",(0,t.jsxs)(n.p,{children:["La m\xe9thode exists() prend en param\xe8tre un identifiant et renvoit ",(0,t.jsx)(n.code,{children:"true"})," si cet identifiant existe dans la table, et ",(0,t.jsx)(n.code,{children:"false"})," si il n'existe pas."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-php",metastring:'title="Entity"',children:"    /**\r\n     * Indique si l'identifiant existe d\xe9j\xe0 dans la base.\r\n     *\r\n     * @param  integer  $id identifiant \xe0 tester.\r\n     * @return bool\r\n     */\r\n    public function exists(int $id): bool\r\n    {\r\n        $sql = \"SELECT COUNT(*) AS c FROM `{$this->tableName}` WHERE id = :id\";\r\n        $sth = $this->query($sql, [':id' => $id]);\r\n        if ($sth) {\r\n            return ($sth->fetch()['c'] > 0);\r\n        }\r\n\r\n        return false;\r\n    }\n"})}),"\n",(0,t.jsx)(n.h3,{id:"create",children:"create()"}),"\n",(0,t.jsx)(n.p,{children:"La m\xe9thode create() est utilis\xe9e pour ajouter un tuple dans une table de la base de donn\xe9e, elle prend en param\xe8tre un tableau associatif o\xf9 les cl\xe9s correspondent aux champs et les valeurs correspondent aux valeurs \xe0 inclure dans ces champs."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-php",metastring:'title="Entity"',children:"    /**\r\n     * Ajoute les nouvelles informations.\r\n     *\r\n     * @param  array  $datas  donn\xe9es \xe0 ajouter organis\xe9es sous forme de tableau associatif.\r\n     * @return integer\r\n     */\r\n    public function create(array $datas): ?int\r\n    {\r\n        $sql = 'INSERT INTO `' . $this->tableName . '` ( ';\r\n        foreach (array_keys($datas) as $k) {\r\n            $sql .= \" {$k} ,\";\r\n        }\r\n        $sql = substr($sql, 0, strlen($sql) - 1) . ' ) VALUE (';\r\n        foreach (array_keys($datas) as $k) {\r\n            $sql .= \" :{$k} ,\";\r\n        }\r\n        $sql = substr($sql, 0, strlen($sql) - 1) . ' )';\r\n\r\n        foreach (array_keys($datas) as $k) {\r\n            $attributes[':' . $k] = $datas[$k];\r\n        }\r\n        $sth = $this->query($sql, $attributes);\r\n        if ($sth) {\r\n            return self::$dbh->lastInsertId();\r\n        }\r\n\r\n        return null;\r\n    }\n"})}),"\n",(0,t.jsx)(n.h3,{id:"update",children:"update()"}),"\n",(0,t.jsx)(n.p,{children:"La m\xe9thode update() est utilis\xe9e pour modifier un tuple dans la table, prend en param\xe8tre un tableau associatif o\xf9 les cl\xe9s correspondent aux champs \xe0 modifier et les valeurs correspondent aux valeurs \xe0 inclure dans ces champs."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-php",metastring:'title="Entity"',children:"    /**\r\n     * \xc9dite les  informations d'un identifiant.\r\n     *\r\n     * @param  integer  $id     identifiant \xe0 modifier.\r\n     * @param  array  $datas  tableau associatif des donn\xe9es \xe0 modifier.\r\n     * @return bool\r\n     */\r\n    public function update(int $id, array $datas): bool\r\n    {\r\n        $sql = 'UPDATE `' . $this->tableName . '` SET ';\r\n        foreach (array_keys($datas) as $k) {\r\n            $sql .= \" {$k} = :{$k} ,\";\r\n        }\r\n        $sql = substr($sql, 0, strlen($sql) - 1);\r\n        $sql .= ' WHERE id =:id';\r\n\r\n        foreach (array_keys($datas) as $k) {\r\n            $attributes[':' . $k] = $datas[$k];\r\n        }\r\n        $attributes[':id'] = $id;\r\n        $sth = $this->query($sql, $attributes);\r\n\r\n        return $sth->rowCount() > 0;\r\n    }\n"})}),"\n",(0,t.jsx)(n.h3,{id:"delete",children:"delete()"}),"\n",(0,t.jsx)(n.p,{children:"La m\xe9thode delete() prend un identifiant en param\xe8tre et supprime de la table le tuple contenant cet identifiant."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-php",metastring:'title="Entity"',children:"    /**\r\n     * Efface l'identifiant.\r\n     *\r\n     * @param  integer  $id identifiant\r\n     * @return int|boolean\r\n     */\r\n    public function delete(int $id): int\r\n    {\r\n        $sql = \"DELETE FROM `{$this->tableName}` WHERE id = :id\";\r\n        $sth = $this->query($sql, [':id' => $id]);\r\n\r\n        return $sth->rowCount() > 0;\r\n    }\n"})}),"\n",(0,t.jsx)(n.h3,{id:"query",children:"query()"}),"\n",(0,t.jsx)(n.p,{children:"La m\xe9thode query() prend une requ\xeate SQL et des attributs si ils existent en param\xe8tres et effectue en requ\xeate pr\xe9par\xe9e cette op\xe9ration."}),"\n",(0,t.jsx)(n.p,{children:"Elle est utilis\xe9e dans les autres m\xe9thodes de la classe pour effectuer toutes les op\xe9rations vers la base de donn\xe9e MySQL."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-php",metastring:'title="Entity"',children:"/**\r\n     * Exc\xe9cute une requ\xe8te.\r\n     *\r\n     * @param string $sql           expression SQL \xe0 traiter\r\n     * @param array $attributs      tableau des attributs\r\n     * @return void\r\n     */\r\n    public function query(string $sql, array $attributs = null)\r\n    {\r\n        // si des attributs sont sp\xe9cifi\xe9s ...\r\n        if ($attributs !== null) {\r\n            // Requ\xeate pr\xe9par\xe9e\r\n            $sth = self::$dbh->prepare($sql);\r\n            $sth->execute($attributs);\r\n\r\n            return $sth;\r\n        } else {\r\n            // ... sinon faire une requ\xeate simple\r\n            return self::$dbh->query($sql);\r\n        }\r\n    }\n"})}),"\n",(0,t.jsx)(n.h3,{id:"getuserlatest",children:"getUserLatest()"}),"\n",(0,t.jsxs)(n.p,{children:["La m\xe9thode getUserLatest() est seulement disponible dans l'entit\xe9e : ",(0,t.jsx)(n.code,{children:"Contribution"}),", et prend un identifiant d'utilisateur en param\xe8tre."]}),"\n",(0,t.jsxs)(n.p,{children:["Elle est utilis\xe9e dans le ",(0,t.jsx)(n.code,{children:"JoueurModel"})," afin de r\xe9cup\xe9rer toutes les contributions ratach\xe9es \xe0 un utilisateur dans l'ordre des plus r\xe9centes aux plus anciennes."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-php",metastring:'title="Contribution.php"',children:"public function getUserLatest(int $id_joueur): ?array\r\n    {\r\n        $sql = \"SELECT * FROM `{$this->tableName}` WHERE id_joueur = :id ORDER BY date_soumission DESC\";\r\n        $sth = $this->query($sql, [':id' => $id_joueur]);\r\n        if ($sth && $sth->rowCount()) {\r\n            return $sth->fetch();\r\n        }\r\n\r\n        return null;\r\n    }\n"})})]})}function c(e={}){const{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(u,{...e})}):u(e)}},1151:(e,n,r)=>{r.d(n,{Z:()=>l,a:()=>a});var t=r(7294);const s={},i=t.createContext(s);function a(e){const n=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),t.createElement(i.Provider,{value:n},e.children)}}}]);