"use strict";(self.webpackChunkloufok=self.webpackChunkloufok||[]).push([[766],{8029:(e,a,n)=>{n.r(a),n.d(a,{assets:()=>u,contentTitle:()=>d,default:()=>l,frontMatter:()=>o,metadata:()=>i,toc:()=>s});var r=n(5893),t=n(1151);const o={sidebar_position:9},d="nouveauCadavre()",i={id:"model-cadavre/nouveauCadavre",title:"nouveauCadavre()",description:"La m\xe9thode nouveauCadavre() de la classe CadavreModel prend en param\xe8tre l'identifiant de l'administrateur qui initie un nouveau Cadavre et les informations du formulaire d'enregistrement d'un nouveau cadavre.",source:"@site/docs/model-cadavre/nouveauCadavre.md",sourceDirName:"model-cadavre",slug:"/model-cadavre/nouveauCadavre",permalink:"/docs/model-cadavre/nouveauCadavre",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/model-cadavre/nouveauCadavre.md",tags:[],version:"current",sidebarPosition:9,frontMatter:{sidebar_position:9},sidebar:"tutorialSidebar",previous:{title:"nouvelleContribution()",permalink:"/docs/model-cadavre/nouvelleContribution"},next:{title:"validationForm()",permalink:"/docs/model-cadavre/validationForm"}},u={},s=[{value:"Code",id:"code",level:2}];function c(e){const a={code:"code",h1:"h1",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,t.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(a.h1,{id:"nouveaucadavre",children:"nouveauCadavre()"}),"\n",(0,r.jsx)(a.p,{children:"La m\xe9thode nouveauCadavre() de la classe CadavreModel prend en param\xe8tre l'identifiant de l'administrateur qui initie un nouveau Cadavre et les informations du formulaire d'enregistrement d'un nouveau cadavre."}),"\n",(0,r.jsx)(a.p,{children:"Cette fonction ne renvoie rien, elle s'occupe seulement d'ins\xe9rer un nouveau Cadavre dans la table de m\xeame nom dans la base de donn\xe9es."}),"\n",(0,r.jsx)(a.p,{children:"Cette m\xe9thode fait appel \xe0 l'entit\xe9e :"}),"\n",(0,r.jsxs)(a.ul,{children:["\n",(0,r.jsx)(a.li,{children:(0,r.jsx)(a.code,{children:"Cadavre"})}),"\n"]}),"\n",(0,r.jsx)(a.h2,{id:"code",children:"Code"}),"\n",(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-php",metastring:'title="CadavreModel"',children:"    /**\r\n     * Ajout d'un nouveau cadavre exquis\r\n     */\r\n    public static function nouveauCadavre($userId, $formData){\r\n        $titre_cadavre = trim(ucfirst(strtolower($formData['titre'])));\r\n        $nb_contributions = $formData['nb_contributions_max'];\r\n        $date_debut = $formData['debut_cadavre'];\r\n        $date_fin = $formData['fin_cadavre'];\r\n        Cadavre::getInstance()->create( \r\n            [\r\n                'titre_cadavre' => $titre_cadavre,\r\n                'nb_contributions' => $nb_contributions,\r\n                'date_debut_cadavre' => $date_debut,\r\n                'date_fin_cadavre' => $date_fin,\r\n                'nb_contributions' => $nb_contributions,\r\n                'nb_jaime' => 0,\r\n                'id_administrateur' => $userId\r\n            ]);\r\n        //la je dois r\xe9cup celui la et le return pour pouvoir le prendre dans nouvelleContribution\r\n        return Cadavre::getInstance()->findBy(['titre_cadavre'=>$titre_cadavre]);\r\n    }\n"})})]})}function l(e={}){const{wrapper:a}={...(0,t.a)(),...e.components};return a?(0,r.jsx)(a,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},1151:(e,a,n)=>{n.d(a,{Z:()=>i,a:()=>d});var r=n(7294);const t={},o=r.createContext(t);function d(e){const a=r.useContext(o);return r.useMemo((function(){return"function"==typeof e?e(a):{...a,...e}}),[a,e])}function i(e){let a;return a=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:d(e.components),r.createElement(o.Provider,{value:a},e.children)}}}]);