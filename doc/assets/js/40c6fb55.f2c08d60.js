"use strict";(self.webpackChunkloufok=self.webpackChunkloufok||[]).push([[8338],{1518:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>d,contentTitle:()=>s,default:()=>c,frontMatter:()=>o,metadata:()=>i,toc:()=>l});var t=n(5893),a=n(1151);const o={sidebar_position:10},s="validationForm()",i={id:"model-cadavre/validationForm",title:"validationForm()",description:"La m\xe9thode validationForm() de la classe CadavreModel prend en param\xe8tre les informations du formulaire d'ajout d'un nouveau Cadavre et v\xe9rifie qu'elles sont toutes conformes.",source:"@site/docs/model-cadavre/validationForm.md",sourceDirName:"model-cadavre",slug:"/model-cadavre/validationForm",permalink:"/docs/model-cadavre/validationForm",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/model-cadavre/validationForm.md",tags:[],version:"current",sidebarPosition:10,frontMatter:{sidebar_position:10},sidebar:"tutorialSidebar",previous:{title:"nouveauCadavre()",permalink:"/docs/model-cadavre/nouveauCadavre"},next:{title:"Mod\xe8le Contribution",permalink:"/docs/category/mod\xe8le-contribution"}},d={},l=[{value:"Code",id:"code",level:2}];function u(e){const r={code:"code",h1:"h1",h2:"h2",p:"p",pre:"pre",...(0,a.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(r.h1,{id:"validationform",children:"validationForm()"}),"\n",(0,t.jsx)(r.p,{children:"La m\xe9thode validationForm() de la classe CadavreModel prend en param\xe8tre les informations du formulaire d'ajout d'un nouveau Cadavre et v\xe9rifie qu'elles sont toutes conformes."}),"\n",(0,t.jsx)(r.p,{children:"Si aucune erreur n'est d\xe9tect\xe9e, la m\xe9thode ne renvoit rien.\r\nSi une ou plusieures erreurs sont d\xe9tect\xe9es, alors la m\xe9thode renverra un tableau associatif contenant les messages d'erreurs."}),"\n",(0,t.jsx)(r.p,{children:"Cette m\xe9thode fait appel au composant Validator de Symfony."}),"\n",(0,t.jsx)(r.h2,{id:"code",children:"Code"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-php",metastring:'title="CadavreModel"',children:"    /**\r\n     * V\xe9rification des inputs du formulaire : \r\n     *      tous les champs doivent \xeatre remplis,\r\n     *      les dates ne doivent pas \xeatre pass\xe9es,\r\n     *      la date de fin doit \xeatre apr\xe8s ou \xe9gale la date de d\xe9but,\r\n     *      le nombre de contributions max doit \xeatre un chiffre entier,\r\n     *      le nombre de contributions max doit \xeatre sup\xe9rieur \xe0 2,\r\n     *      La contribution doit contenir au moins 50 caract\xe8res,\r\n     *      La contribution ne doit pas contenir plus de 280 caract\xe8res.\r\n     * \r\n     * Ne renvoie rien si toutes les conditions sont r\xe9unies, sinon renvoie un tableau associatif des erreurs :\r\n     *      [\r\n     *          'titre_cadavre' => ...,\r\n     *          'debut_cadavre' => ...,\r\n     *          'fin_cadavre' => ...,\r\n     *          'nb_contributions' => ...,\r\n     *          'contribution' => ...\r\n     *      ]\r\n     *      ( min : une erreur, max : 5 erreurs )\r\n     */\r\n    public static function validationForm($formData)\r\n    {\r\n        $validator = Validation::createValidator();\r\n        $ajd = date('Y-m-d', strtotime('today UTC'));\r\n\r\n        // Cr\xe9ez un objet de contraintes de validation\r\n        $constraints = new Assert\\Collection([\r\n            'titre' => [\r\n                new Assert\\NotBlank([\r\n                    'message' => 'Ce champ doit \xeatre rempli',\r\n                ])\r\n            ],\r\n            'debut_cadavre' => [\r\n                new Assert\\NotBlank([\r\n                    'message' => 'Ce champ doit \xeatre rempli',\r\n                ]),\r\n                new Assert\\Date([\r\n                    'message' => 'Vous devez rentrez une date',\r\n                ]),\r\n                new Assert\\GreaterThanOrEqual([\r\n                    'value' => $ajd,\r\n                    'message' => 'La date ne peut pas d\xe9j\xe0 \xeatre pass\xe9e',\r\n                ]),\r\n            ],\r\n            'fin_cadavre' => [\r\n                new Assert\\NotBlank([\r\n                    'message' => 'Ce champ doit \xeatre rempli',\r\n                ]),\r\n                new Assert\\Date([\r\n                    'message' => 'Vous devez rentrez une date',\r\n                ]),\r\n                new Assert\\GreaterThanOrEqual([\r\n                    'value' => $ajd,\r\n                    'message' => 'La date ne peut pas d\xe9j\xe0 \xeatre pass\xe9e',\r\n                ]),\r\n            ],\r\n            'nb_contributions_max' => [\r\n                new Assert\\NotBlank([\r\n                    'message' => 'Ce champ doit \xeatre rempli',\r\n                ]),\r\n                new Assert\\Regex([\r\n                    'pattern' => '/^[1-9][0-9]*$/',\r\n                    'message' => 'La valeur doit \xeatre un nombre entier (pas de chiffres apr\xe8s la virgule)',\r\n                ]),\r\n                new Assert\\Positive([\r\n                    'message' => 'La valeur doit \xeatre positive',\r\n                ]),\r\n                new Assert\\GreaterThanOrEqual([\r\n                    'value' => 2,\r\n                    'message' =>\"La valeur doit \xeatre \xe9gale ou sup\xe9rieure \xe0 2\",\r\n                ]),\r\n            ],\r\n            'contribution' => [\r\n                new Assert\\NotBlank([\r\n                    'message' => 'Ce champ doit \xeatre rempli',\r\n                ]),\r\n                new Assert\\Length([\r\n                    'min' => 50,\r\n                    'max' => 280,\r\n                    'minMessage' => 'Le texte doit contenir au moins 50 caract\xe8res',\r\n                    'maxMessage' => 'Le texte ne peut pas contenir plus de 280 caract\xe8res',\r\n                ]),\r\n            ],\r\n        ]);\r\n\r\n        // Validez les donn\xe9es du formulaire\r\n        $violations = $validator->validate($formData, $constraints);\r\n        $errors = [];\r\n        if (0 !== count($violations)) {\r\n            // Le formulaire n'est pas valide, r\xe9cup\xe9rer les erreurs pour les afficher\r\n            foreach ($violations as $violation) {\r\n                $field = str_replace(['[', ']'], '', $violation->getPropertyPath());\r\n                $message = $violation->getMessage();\r\n                $errors[$field] = $message;\r\n            }\r\n            return $errors;\r\n        }\r\n    }\n"})})]})}function c(e={}){const{wrapper:r}={...(0,a.a)(),...e.components};return r?(0,t.jsx)(r,{...e,children:(0,t.jsx)(u,{...e})}):u(e)}},1151:(e,r,n)=>{n.d(r,{Z:()=>i,a:()=>s});var t=n(7294);const a={},o=t.createContext(a);function s(e){const r=t.useContext(o);return t.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function i(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:s(e.components),t.createElement(o.Provider,{value:r},e.children)}}}]);